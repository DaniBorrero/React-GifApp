{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGirdItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","title","GifGirdItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAgB,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAST,EACTU,SAlBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,0DAC2CC,UAAUH,GADrD,sDAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE5B,MAAM,CACJC,GAAID,EAAIC,GACRT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,IAClCY,MAAOJ,EAAII,UAVM,kBAcdN,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBD,EAAgB,EAAhBA,MAAOZ,EAAS,EAATA,IAClC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAOJ,IACtB,4BAAIA,QCAGK,EAAU,SAAC,GAAiB,IAAfnB,EAAc,EAAdA,SAAc,ECHZ,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WACRxB,EAAQC,GACPwB,MAAM,SAAAC,GACHH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAGGqB,EDdyBK,CAAa1B,GAAhCY,EADyB,EAC/BL,KAAca,EADiB,EACjBA,QACrB,OACE,qCACA,6BAAKpB,IACL,sBAAKgB,UAAU,YAAf,UACCI,GAAW,aAENR,EAAOH,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADGA,EAAIC,cEZZgB,EAAe,WAAO,IAAD,EAEIzC,mBAAS,CAAC,QAFd,mBAEzB0C,EAFyB,KAEb3C,EAFa,KAQhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEI2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAYA,GADLA,Y,MCfrB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6ded1362.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputValue = (e) => {    \n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();    \n    if (inputValue.trim().length > 2){\n      setCategories ( cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n    \n  }\n\n  return(\n    <form onSubmit = {handleSubmit}>\n      <input\n        type=\"text\"\n        value = {inputValue}\n        onChange = {handleInputValue}\n      />\n    </form>\n  );\n  \n};\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};","export const getGifs = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category) }&api_key=3KdB6xujDx3IGO3O3w0Ze2KIa2Y2SPsz`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();    \n\n  const gifs = data.map( img => {\n\n    return{\n      id: img.id,\n      url: img.images?.downsized_medium.url,\n      title: img.title\n    }\n  })  \n\n  return gifs;\n}  ","import React from 'react'\n\nexport const GifGirdItem = ({title, url}) => {  \n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt = {title} /> \n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifts';\nimport {GifGirdItem} from './GifGirdItem';\n\n//import { GifGirdItem } from './GifGirdItem';\n\nexport const GifGrid = ( {category}) => {  \n  const {data: images, loading} = useFetchGifs(category); \n  return (\n    <>\n    <h3>{category}</h3> \n    <div className=\"card-grid\">  \n    {loading && 'Cargando..'}    \n        {\n          images.map( img =>(              \n            <GifGirdItem            \n              key = {img.id}\n              {...img}\n            />\n          ))\n        }      \n    </div>\n    </>    \n  )\n}\n\n\n\n","import {useEffect, useState} from 'react'\nimport {getGifs}  from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(()=>{\n    getGifs(category)\n    .then( imgs => {      \n        setState({\n          data: imgs,\n          loading: false\n        });      \n    })\n\n  }, [category])\n  \n\n  return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['DBZ']);\n\n  // const handleAdd = () => {\n  //   setCategories([...categories,'One puch'])\n  //  };\n\n  return(\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories = { setCategories } /> \n      <hr/>\n\n      <ol>\n        {\n          categories.map (category => \n            <GifGrid\n              key = {category}\n              category = {category}\n            />\n\n          )\n        }\n      </ol>\n    </>\n  )\n} ;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GitExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(  \n    <GifExpertApp />,  \n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}